{
  "name": "Telegram channel administrator",
  "nodes": [
    {
      "parameters": {
        "url": "https://www.deeplearning.ai/the-batch/",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        384,
        672
      ],
      "id": "a458517d-9307-44ee-aa9e-be4070e72a22",
      "name": "Web scrapping of main page"
    },
    {
      "parameters": {
        "jsCode": "const html = $json[\"data\"] || $json; \n\nconst match = html.match(/\\/the-batch\\/issue-\\d+\\//);\nconst latest = match ? `https://www.deeplearning.ai${match[0]}` : null;\n\nreturn [{ latestArticle: latest }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        592,
        672
      ],
      "id": "a3fda9b6-55a0-4f01-b1a7-b87f4e85398f",
      "name": "Looking for the latest article"
    },
    {
      "parameters": {
        "url": "={{ $json.latestArticle }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        672
      ],
      "id": "ff6db63f-0f98-41ec-82ec-f48c5acca732",
      "name": "Web scrapping of the latest article"
    },
    {
      "parameters": {
        "chunkingMode": "advanced",
        "options": {
          "summarizationMethodAndPrompts": {
            "values": {
              "summarizationMethod": "stuff",
              "prompt": "=You obtain title {{ $json.title }}-content {{ $json.content }} pairs of each article. Write short summary for each of the article in Summary. Try to be short and informative. Each summary should be less than 70 words. Return just summaries without additional words like \"summary:\", etc. \n\nSummary:"
            }
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 2.1,
      "position": [
        1392,
        672
      ],
      "id": "f82306e7-597d-4c90-8ecc-3bff2d012404",
      "name": "Summarization Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1392,
        848
      ],
      "id": "003c1975-55af-4bd8-b2b1-b2d7bc6f5042",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "T1GyX6ts6ok9CHNQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "content",
              "cssSelector": "h1#news ~ *",
              "returnArray": true
            },
            {
              "key": "title",
              "cssSelector": "h1#news ~ h1",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        976,
        672
      ],
      "id": "dcbb7092-9f09-4814-9adb-5016bac726f3",
      "name": "content extractor"
    },
    {
      "parameters": {
        "jsCode": "const titles = ($input.first().json.title || []).map(t => t.trim());\nconst blocks = ($input.first().json.content || []).map(b => b.trim()).filter(b => b);\n\nlet sections = [];\nlet currentTitle = null;\nlet currentText = [];\n\n// Normalize helper for matching\nconst normalize = s => s.replace(/\\s+/g, ' ').trim();\n\nblocks.forEach(block => {\n  const normBlock = normalize(block);\n  const matchedTitle = titles.find(t => normalize(t) === normBlock);\n\n  if (matchedTitle) {\n    // Save the previous section if it exists\n    if (currentTitle) {\n      sections.push({\n        title: currentTitle,\n        content: currentText.join(\"\\n\\n\")\n      });\n    }\n    // Start a new section\n    currentTitle = matchedTitle;\n    currentText = [];\n  } else if (currentTitle) {\n    currentText.push(block);\n  }\n});\n\n// Push the last collected section\nif (currentTitle) {\n  sections.push({\n    title: currentTitle,\n    content: currentText.join(\"\\n\\n\")\n  });\n}\n\n// Return as separate objects for n8n (table-friendly)\nreturn sections.map(section => ({\n  json: {\n    title: section.title,\n    content: section.content\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        672
      ],
      "id": "24e6ce1a-8bbe-4202-8b7b-4540d4af7ff6",
      "name": "Creating records for each of subtopic in the article"
    },
    {
      "parameters": {
        "chatId": "734665261",
        "text": "={{ $json.output}}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        784,
        208
      ],
      "id": "df3f894b-569c-4442-b1b1-c78f34e71a2b",
      "name": "Send a text message",
      "webhookId": "6d657993-7633-4785-888a-f98df4d49647",
      "credentials": {
        "telegramApi": {
          "id": "4fxritAHMtshzBey",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an article editor. Articles can be obtained from Google Sheets. The instruction of what needs to be changed are provided by user: {{$json.message.text}}. Follow the intrsuctions and update articles in Google Sheets. If the user wants to delete some of the artices, delete them from Google Sheets. Every time you update the article, return the updated version and explain what you have changed in it. Be avare that first row in the Google sheets is used for header, so when user refers to the articles by their order numbers, the article in the second row is actually \"first article\" and so on.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        272,
        208
      ],
      "id": "5244f569-6df9-4c13-b3bc-fe6938295996",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        272,
        400
      ],
      "id": "6d19ddf8-cc6d-463c-ad66-d5e3ecf8d014",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "T1GyX6ts6ok9CHNQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "chatIds": "734665261"
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -448,
        192
      ],
      "id": "7472618e-d53f-4936-81d2-d9847702ade3",
      "name": "Telegram Trigger",
      "webhookId": "e0d25611-a6e3-4f48-aa50-7237a1b8b6bb",
      "credentials": {
        "telegramApi": {
          "id": "4fxritAHMtshzBey",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Лист1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit#gid=0"
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        176,
        672
      ],
      "id": "5a10e7f8-1c6f-4dcc-a19e-5224b0c6faf1",
      "name": "Clear sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FU7YjtZDIsqemhJt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.message.text }}",
        "categories": {
          "categories": [
            {
              "category": "Agreement",
              "description": "User agrees to publish (send) the articles and provides numbers(ids) of articles to be published (sent) to the channel. Key words are: post , channel"
            },
            {
              "category": "Instruction",
              "description": "Users wants some of the articles to be provided or tweaked with respect to instruction s provided. Also includes numbers(ids) of articles that should be tweaked"
            },
            {
              "category": "New article",
              "description": "When user's prompt is: \"+\""
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1.1,
      "position": [
        -240,
        176
      ],
      "id": "b5e6e32e-016d-45fb-9e45-8efb85ee0be2",
      "name": "Text Classifier"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Лист1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "output"
          ],
          "schema": [
            {
              "id": "output",
              "displayName": "output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1712,
        816
      ],
      "id": "883b1866-06b7-43dd-86bc-7a92e8276796",
      "name": "Save articles",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FU7YjtZDIsqemhJt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "734665261",
        "text": "={{ $json.output.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1712,
        624
      ],
      "id": "5cd4de86-7ea7-40d8-887a-922d72da7de7",
      "name": "Send articles",
      "webhookId": "4fa9a8cf-5166-4c3b-ad73-9f7832e2d389",
      "credentials": {
        "telegramApi": {
          "id": "4fxritAHMtshzBey",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "@aiitnews1234",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        560,
        -64
      ],
      "id": "1dc78b35-138f-4af3-a70c-73703382c133",
      "name": "Send articles to the channel",
      "webhookId": "6f94b4f0-4795-422f-900b-521e4a6768e7",
      "credentials": {
        "telegramApi": {
          "id": "4fxritAHMtshzBey",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Лист1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRange"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        160,
        -64
      ],
      "id": "dbee1464-1170-4f39-b5ae-739dc6a60764",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FU7YjtZDIsqemhJt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let content = item.json.output;\n\n  try {\n    // Try to parse as JSON if it's in a stringified object format\n    const parsed = JSON.parse(content);\n    content = parsed.text || content;\n  } catch (e) {\n    // If it's already plain text, leave it as-is\n  }\n\n  return {\n    json: {\n      row_number: item.json.row_number,\n      text: content.trim()\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -64
      ],
      "id": "d1481e6e-c440-42a9-8b6b-d9bd6db96a00",
      "name": "Prepare articles for posting"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=user_1",
        "contextWindowLength": 15
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        400,
        400
      ],
      "id": "b9071361-424b-4694-97d0-c2747a4f7716",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -240,
        384
      ],
      "id": "da2b57a9-cf7a-472e-baac-008decc71f2e",
      "name": "Text classifier",
      "credentials": {
        "googlePalmApi": {
          "id": "T1GyX6ts6ok9CHNQ",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Delete articles from Google Sheets. Only articles which were asked to be deleted by user should be deleted.",
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Лист1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit#gid=0"
        },
        "startIndex": "={{$fromAI(\"start_row_number\", \"first article row to be deleted\")}}",
        "numberToDelete": "={{$fromAI(\"number_rows_to_delete\", \"rows of articles to be deleted\")}}"
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        544,
        400
      ],
      "id": "a108c797-8b1b-4609-b086-313a4b66abcb",
      "name": "Delete articles from Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FU7YjtZDIsqemhJt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "These are articles that you need to modify accordingly to instrunctions",
        "documentId": {
          "__rl": true,
          "value": "1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Лист1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRange"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        688,
        400
      ],
      "id": "51383708-bf8b-4537-99d0-fd97edf298a7",
      "name": "Get articles from Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FU7YjtZDIsqemhJt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "If user wants to tweak the article (or multiple articles) in some way, you should change the article with it updated version in Google Sheets",
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4",
          "mode": "list",
          "cachedResultName": "articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Лист1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1k1X5oYWBpO4__0qO5dergMweCAARupqRQ1aTtOY3ij4/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "output": "={{$fromAI(\"articles_to_update\", \"which article should be updated and in which way\")}}",
            "row_number": "={{$fromAI(\"row_number_of_article_to_update\", \"the row number of the article that is updated\")}}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "output",
              "displayName": "output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        832,
        400
      ],
      "id": "fdedf055-2ae0-494e-891a-c08f514430d1",
      "name": "Update articles in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FU7YjtZDIsqemhJt",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Sending articles to the channel\n",
        "height": 352,
        "width": 720
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        64,
        -192
      ],
      "typeVersion": 1,
      "id": "2d4a5f68-23ba-4e2c-9fe1-01795e5276c0",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Modify articles (if needed)\n",
        "height": 400,
        "width": 784,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        208,
        160
      ],
      "typeVersion": 1,
      "id": "ab2e88c3-b7ae-4e98-b6c9-16b8b2655c33",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Get articles with Web Scrapping\n",
        "height": 400,
        "width": 1744,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        128,
        592
      ],
      "typeVersion": 1,
      "id": "5a20b924-8f7b-4b8c-a9c6-a03060ddcbe9",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "Web scrapping of main page": {
      "main": [
        [
          {
            "node": "Looking for the latest article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Looking for the latest article": {
      "main": [
        [
          {
            "node": "Web scrapping of the latest article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Web scrapping of the latest article": {
      "main": [
        [
          {
            "node": "content extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Summarization Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Summarization Chain": {
      "main": [
        [
          {
            "node": "Save articles",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "content extractor": {
      "main": [
        [
          {
            "node": "Creating records for each of subtopic in the article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Creating records for each of subtopic in the article": {
      "main": [
        [
          {
            "node": "Summarization Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear sheet": {
      "main": [
        [
          {
            "node": "Web scrapping of main page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Clear sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save articles": {
      "main": [
        []
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Prepare articles for posting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send articles to the channel": {
      "main": [
        []
      ]
    },
    "Prepare articles for posting": {
      "main": [
        [
          {
            "node": "Send articles to the channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Text classifier": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Delete articles from Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get articles from Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update articles in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f257626d-377a-4dcc-8e19-81144bf180c0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1e2f781e8683765ff3a86cc526330af190d4a2bbb33a9ef48e04a667dc907abb"
  },
  "id": "pjG1mN9kYPlF10t5",
  "tags": []
}